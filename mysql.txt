1、mysql连接
mysql -h 127.0.0.1 -uroot -p159357 -P3306

tee d:\20150924.sql(把操作记录到d:\20150924.sql中）

set names gbk;

mysql> select user();
+----------------+
| user()         |
+----------------+
| root@localhost |
+----------------+
1 row in set (0.00 sec)

mysql> select database();
+------------+
| database() |
+------------+
| test       |
+------------+
1 row in set (0.00 sec)

允许192.168.159.1访问，其中*.*，第一个*指定库，第二个*指定表
grant all privileges on *.* to root@'192.168.159.1' identified by '159357' with grant option;
flush privileges

允许任何主机访问：
grant all privileges on *.* to root@'%' identified by '159357' with grant option;
flush privileges

mysql>set password =password('你的密码');
mysql>flush privileges;

远程连接慢，修改/etc/my.cnf
在[mysqld]下添加：
skip-name-resolve
重启mysql服务即可。


drop user test@‘%’


mysqld_safe --skip-grant-tables

2、查看有哪些数据库：show databases like 'sh%';
      创建一个数据库：create database if not exists shop charset utf8;
      选择一个数据库：use daas;
      查看该数据库中有哪些表：show tables from shop like 'go%';
      查看表的数据结构：desc stu;
      查看表中的数据：select * from stu;
      清空一张表中的内容：truncate stu;
      删除一张表：drop table if exists stu;
      
通常，查看系统的字符集和排序方式的设定可以通过下面的两条命令：
      SHOW VARIABLES LIKE 'character%';
      SHOW VARIABLES LIKE 'collation_%';
       
3、创建一张表：
create table stu(
snum smallint(5) zerofill not null default 0,
name varchar(10) not null default '',
gender char(1),
age tinyint unsigned not null default 0
)engine myisam charset utf8;

4、往表中插入数据：
insert into stu(name,gender,age)
values
("钟建东","男",32),
("千百度","女",26);

5、修改表中的数据：
update stu set  name="钟剑东",age=31 where id=1;

6、删除表中的某个数据：
delete from stu  where id=1;

7、查询指定列指定行数据：
select age,name,gender from stu where id=2;

8、
整型（tinyint 1个字节、smallint 2个字节、mediumint 3个字节、int 4个字节、bigint 8个字节）：int（M）和zerofill一起使用才有意义，如int（5)  zerofill,当赋值为1时，内容是00001

浮点型：float（M,D),M代表总位数，D代表小数点后的位数
定点型：decimal(M,D)，整数部分和小数部分是分开存储的，比float精确。

char：定长，对于char(N)，不够N个长度，在尾部补齐N个空格，取出时把尾部空格删掉，这意味着如果字符串本身尾部有空格，将会丢失。char（M），M限制为0<=M<=255
varchar：变长，对于varchar(N)，不用空格补齐，但在内容前，有1-2个字节存放字符个数。varchar(M)，M限制为0<=M<=65535

text：文本类型，可以存比较大的文本段，搜索 速度稍慢。不能加默认值。longtext
blob：二进制类型，用于存放图像、音频等二进制信息。意义在于防止因为字符集的原因导致数据丢失。

timestamp  CURRENT_TIMESTAMP
year类型 范围1901——2155

9、修改表

增加列：
alter table test  add username char(20) not null default '' after id;
alter table test  add id int unsigned not null default 0 first;

删除列：
alter table test drop username;

修改列类型：
alter table test modify vca char(6) not null default '';(不能修改列名)
修改列名及列类型：
ALTER TABLE 表名 CHANGE 旧列名 新列名 列类型 [FIRST|AFTER 列名]
alter table test change vca ca varchar(20) not null default '';


更改表名：
ALTER TABLE 表名 RENAME 新表名;
RENAME TABLE 表名 TO 新表名；

10、ecshop
show create table shop.goods;
insert into goods select goods_id,cat_id,goods_sn,goods_name,goods_name_style,click_count,goods_number,market_price,shop_price,add_time,is_best,is_new,is_hot from shop.goods;

select goods_id,goods_name,(market_price-shop_price) as 优惠 from goods having 优惠>200

update interview set num=floor(num/10)*10 where num >=20 and num<=39; 

select count(*) from goods; 但是Innodb的表，用count（*）效率低

select cat_id,sum(goods_number) from goods group by cat_id;

select distinct cat_id from goods;//返回不同的cat_id

11、有一个补考成绩表，查询出补考成绩有2门以上不及格学生的平均成绩。
create table bkb
(
name varchar(20),
subject varchar(20),
score tinyint(4)
)engine myisam charset utf8;

insert into bkb
values
('张三','语文',90),
('张三','数学',55),
('张三','英语',45),
('李四','语文',58),
('李四','英语',46),
('王五','英语',48);

select name,avg(score),sum(score<60) as gks from bkb group by name having gks>=2;

12、为什么值一般不为NULL
NULL不好比较；效率不高，影响索引效果。

13、select count(*)/count(1) from goods;统计goods表多少条记录   select count(列名) from goods;查询该列不为null的行数
        Innodb的表，用count(*)效率很低
        select max(shop_price) from goods;
        select avg(shop_price) from goods;
     
14、group by
一次计算出每个cat_id下的商品数目
select  cat_id, sum(goods_number) from goods group by cat_id;
select  cat_id, avg(shop_price) from goods group by cat_id;

15、create table minigoods like goods;
        insert into minigoods select * from goods limit 3;
        
 16、select  goods_id,goods_name,cat_name from minigoods,category where minigoods.cat_id=category.cat_id;
         select  goods_id,goods_name,cat_name from minigoods left join category on minigoods.cat_id=category.cat_id;
         
 17、
         create table a(
         id int,
         subject char(2),
         score int
         )engine myisam charset utf8;
         
         create table b(
         id int,
         name varchar(4)
         )engine myisam charset utf8;
         
         insert into a
         values
         (1,'数学',90),
         (1,'政治',78),
         (2,'英语',88),
         (2,'化学',72),
         (3,'历史',64),
         (4,'语文',93);
         
         insert into b
         values
         (1,'张成文'),
         (2,'林娇娇'),
         (4,'黄君璧');
         
         select a.*,b.* from a left join b on a.id=b.id;
         select a.*,b.* from a right join b on a.id=b.id;
         select a.*,b.* from a inner join b on a.id=b.id;
         
18、       
C表:
+------+------+
| id   | num  |
+------+------+
| a    |    5 |
| b    |   10 |
| c    |   15 |
| d    |   10 |
+------+------+

D表:
+------+------+
| id   | num  |
+------+------+
| b    |    5 |
| c    |   15 |
| d    |   20 |
| e    |   99 |
+------+------+
要求查询出以下效果:
+------+----------+
| id   | sum(num) |
+------+----------+
| a    |        5 |
| b    |       15 |
| c    |       30 |
| d    |       30 |
| e    |       99 |
+------+----------+

select id,sum(num) from (select * from c union all select * from d) as tmp group BY id;

19、有以下2张表，根据给出的表结构，写出建表SQL语句。
Match 赛程表
字段名称	字段类型	描述
matchID	int	主键
hostTeamID	int	主队的ID
guestTeamID	int	客队的ID
matchResult	varchar(20)	比赛结果，如（2:0）
matchTime	date	比赛开始时间

Team 参赛队伍表
字段名称	字段类型	描述
teamID	int	主键
teamName	varchar(20)	队伍名称

Match的hostTeamID与guestTeamID都与Team中的teamID关联
查出 2006-6-1 到2006-7-1之间举行的所有比赛，并且用以下形式列出：
恒大  2：0  申花 2006-6-21
写出查询语句。
create table m
(
mid int,
hid int,
gid int,
mres varchar(20),
mtime date
)engine myisam charset utf8;

create table t
(
tid int,
tname varchar(20)
)engine myisam charset utf8;

insert into m
values
(1,1,2,'2:0','2006-05-21'),
(2,2,3,'1:2','2006-06-21'),
(3,3,1,'2:5','2006-06-25'),
(4,2,1,'3:2','2006-07-05');

insert into t
values
(1,'广州恒大'),
(2,'上海申花'),
(3,'福建国安');
select t1.tname,mres,t2.tname from (m left join t as t1 on m.hid=t1.tid) left join t as t2 on m.gid=t2.tid where mtime between '2006-06-01' and '2006-07-01';

20、select cat_id,goods_name from goods where cat_id=4
        union all select cat_id,goods_name from minigoods where cat_id=4;

21、select goods_name,shop_price,floor(rand()*10+5.999) as bonus from goods;

22、select cat_name,group_concat(goods_name) from goods left join category on goods.cat_id=category.cat_id group by goods.cat_id;

23、length返回字节数；char_length返回字符数。
mysql> select *,length(tname) from t;
+------+----------+---------------+
| tid  | tname    | length(tname) |
+------+----------+---------------+
|    1 | 广州恒大        |            12 |
|    2 | 上海申花      |            12 |
|    3 | 福建国安         |            12 |
+------+----------+---------------+
3 rows in set (0.01 sec)

mysql> select length("上海申花");
+--------------------+
| length("上海申花")      |
+--------------------+
|                  8 |
+--------------------+
1 row in set (0.00 sec)


mysql> select char_length("上海申花");
+-------------------------+
| char_length("上海申花")      |
+-------------------------+
|                       4 |
+-------------------------+
1 row in set (0.00 sec)

mysql> select *,char_length(tname) from t;
+------+----------+--------------------+
| tid  | tname    | char_length(tname) |
+------+----------+--------------------+
|    1 | 广州恒大        |                  4 |
|    2 | 上海申花      |                  4 |
|    3 | 福建国安         |                  4 |
+------+----------+--------------------+
3 rows in set (0.00 sec)

24、mysql> select position('@' in 'test@126.com');
+---------------------------------+
| position('@' in 'test@126.com') |
+---------------------------------+
|                               5 |
+---------------------------------+
1 row in set (0.00 sec)

mysql> select right('test@126.com',3);
+-------------------------+
| right('test@126.com',3) |
+-------------------------+
| com                     |
+-------------------------+
1 row in set (0.00 sec)

25、
create table member(
uname varchar(20),
email varchar(20)
)engine myisam charset utf8;

insert into member
values
('张三','zhangsan@yd.com'),
('李四','lisi@qq.com'),
('王五','王五@qq.com'),
('赵六','zhaoliu@gmail.com'),
('郑智化','zhengzhihua@126.com');

mysql> select uname,right(email,char_length(email)-position('@' in email)) from
member;
+--------+--------------------------------------------------------+
| uname  | right(email,char_length(email)-position('@' in email)) |
+--------+--------------------------------------------------------+
| 张三       | yd.com                                                 |
| 李四       | qq.com                                                 |
| 王五       | qq.com                                                 |
| 赵六       | gmail.com                                              |
| 郑智化     | 126.com                                                |
+--------+--------------------------------------------------------+
5 rows in set (0.00 sec)

26、
mysql> select now();
+---------------------+
| now()               |
+---------------------+
| 2016-01-01 19:04:11 |
+---------------------+
1 row in set (0.00 sec)

mysql> select curdate();
+------------+
| curdate()  |
+------------+
| 2016-01-01 |
+------------+
1 row in set (0.00 sec)

mysql> select curtime();
+-----------+
| curtime() |
+-----------+
| 19:05:52  |
+-----------+
1 row in set (0.00 sec)

27、create table jiaban( 
        overtime int,
        dt date
        )engine myisam charset utf8;
        
        insert into jiaban
        values
        (2,'2015-12-1'),
        (2,'2015-12-2'),
        (3,'2015-12-3'),
        (1,'2015-12-7'),
        (3,'2015-12-8'),
        (2,'2015-12-9');
        
        mysql> select sum(overtime),week(dt) as wk from jiaban group by wk;
+---------------+------+
| sum(overtime) | wk   |
+---------------+------+
|             7 |   48 |
|             6 |   49 |
+---------------+------+
2 rows in set (0.00 sec)


28、create table stu(
        sname varchar(20),
        gender int
        )engine myisam charset utf8;
        
        insert into stu
        values
        ('张三',1),
        ('韩梅梅',0),
        ('李宇春',2);
        
mysql> select sname, case gender WHEN 0 then '女' when 1 then '男' else '保密' end as 性别 from stu;
+--------+------+
| sname  | 性别    |
+--------+------+
| 张三       | 男     |
| 韩梅梅     | 女    |
| 李宇春      | 保密     |
+--------+------+
3 rows in set (0.00 sec)

mysql> select sname,if(gender=0,'优先','等待') as vip from stu;
+--------+------+
| sname  | vip  |
+--------+------+
| 张三       | 等待    |
| 韩梅梅     | 优先     |
| 李宇春      | 等待    |
+--------+------+

mysql> select * from test3;
+-------+
| sname |
+-------+
| 张三      |
| 李四      |
| NULL  |
+-------+
3 rows in set (0.00 sec)

mysql> select ifnull(sname,'sname') from test3;
+-----------------------+
| ifnull(sname,'sname') |
+-----------------------+
| 张三                      |
| 李四                      |
| sname                 |
+-----------------------+
3 rows in set (0.00 sec)

29、view
mysql> create view view1 as select cat_id,avg(shop_price) as pj from goods group
 by cat_id;
Query OK, 0 rows affected (0.01 sec)

mysql> select * from view1;
+--------+-------------+
| cat_id | pj          |
+--------+-------------+
|      2 |  823.330000 |
|      3 | 1746.066667 |
|      4 | 2297.000000 |
|      5 | 3700.000000 |
|      8 |   75.333333 |
|     11 |   31.000000 |
|     13 |   33.500000 |
|     14 |   54.000000 |
|     15 |   80.000000 |
+--------+-------------+
9 rows in set (0.00 sec)

30、取出每个栏目下价格最贵的商品ID、商品名称、商品价格
select cat_id,goods_id,goods_name,shop_price from goods where shop_price in (select max(shop_price) from goods group by cat_id);

31、截取字符串
从左开始截取字符串：left(str, length)；说明：left(被截取字段，截取长度)
从右开始截取字符串：right(str, length)；说明：right(被截取字段，截取长度)
截取字符串：substring(str, pos)；说明：substring(被截取字段，从第几位开始截取)
substring(str, pos, length)；substring(被截取字段，从第几位开始截取，截取长度)

select right(md5(1+rand()*9999),6);
select md5(concat(md5('engine'),'a2058c'));

insert into pre_ucenter_members set username='ptest6',salt=right(md5(1+rand()*9999),6),password=md5(concat(md5('engine'),salt)),email='ptest6@qq.com';







练习题和mysql语句
create table Student(sid varchar(10),sname varchar(10),sage datetime,ssex nvarchar(10));
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');

create table Course(cid varchar(10),cname varchar(10),tid varchar(10));
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');

create table Teacher(tid varchar(10),tname varchar(10));
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');

create table SC(sid varchar(10),cid varchar(10),score decimal(18,1));
insert into SC values('01' , '01' , 80);
insert into SC values('01' , '02' , 90);
insert into SC values('01' , '03' , 99);
insert into SC values('02' , '01' , 70);
insert into SC values('02' , '02' , 60);
insert into SC values('02' , '03' , 80);
insert into SC values('03' , '01' , 80);
insert into SC values('03' , '02' , 80);
insert into SC values('03' , '03' , 80);
insert into SC values('04' , '01' , 50);
insert into SC values('04' , '02' , 30);
insert into SC values('04' , '03' , 20);
insert into SC values('05' , '01' , 76);
insert into SC values('05' , '02' , 87);
insert into SC values('06' , '01' , 31);
insert into SC values('06' , '03' , 34);
insert into SC values('07' , '02' , 89);
insert into SC values('07' , '03' , 98);


1. 查询“01”课程比“02”课程成绩高的所有学生的学号；

select distinct t1.sid as sid from 
    (select * from SC where cid='01') t1
left join 
    (select * from SC where cid='02') t2
on t1.sid=t2.sid
where t1.score>t2.score



2. 查询平均成绩大于60分的同学的学号和平均成绩；

select 
    sid,avg(score)
from SC
group by sid
having avg(score)>60


3. 查询所有同学的学号、姓名、选课数、总成绩

select
    student.sid as sid
    ,sname
    ,count(distinct cid) course_cnt
    ,sum(score) as total_score
from student
left join sc
on student.sid=sc.sid
group by sid,sname

4. 查询姓“李”的老师的个数；

select
    count(distinct tid) as teacher_cnt
from teacher
where tname like '李%'

5. 查询没学过“张三”老师课的同学的学号、姓名；

select
    sid,sname
from student
where sid not in 
    (
        select
            sc.sid
        from teacher
        left join course
            on teacher.tid=course.tid
        left join sc
            on course.cid=sc.cid
        where teacher.tname='张三'
    )

6. 查询学过“01”并且也学过编号“02”课程的同学的学号、姓名；

select
    t.sid as sid
    ,sname
from 
    (
        select
            sid
            ,count(if(cid='01',score,null)) as count1
            ,count(if(cid='02',score,null)) as count2
        from sc
        group by sid
        having count(if(cid='01',score,null))>0 and count(if(cid='02',score,null))>0
    )t
left join student
    on t.sid=student.sid

7. 查询学过“张三”老师所教的课的同学的学号、姓名；

select
    student.sid
    ,sname
from 
    (
        select
            distinct cid 
        from course
        left join teacher 
        on course.tid=teacher.tid
        where teacher.tname='张三'
    )course
left join sc 
    on course.cid=sc.cid
left join student
    on sc.sid=student.sid
group by student.sid,sname

8. 查询课程编号“01”的成绩比课程编号“02”课程低的所有同学的学号、姓名；

select
    t1.sid,sname
from 
    (
        select distinct t1.sid as sid
        from 
            (select * from sc where cid='01')t1
        left join 
            (select * from sc where cid='02')t2
        on t1.sid=t2.sid
        where t1.score>t2.score
    )t1
left join student
    on t1.sid=student.sid

9. 查询所有课程成绩小于60分的同学的学号、姓名；

select
    t1.sid,sname
from 
    (
        select
            sid,max(score)
        from sc
        group by sid
        having max(score<60)
    )t1
left join student
    on t1.sid=student.sid

10. 查询没有学全所有课的同学的学号、姓名；

select
    t1.sid,sname
from 
    (
        select
            count(cid),sid
        from sc
        group by sid
        having count(cid) < (select count(distinct cid) from course)
    )t1
left join student
    on t1.sid=student.sid

11. 查询至少有一门课与学号为“01”的同学所学相同的同学的学号和姓名；

select
    distinct sc.sid
from 
    (
        select
            cid
        from sc
        where sid='01'
    )t1
left join sc
    on t1.cid=sc.cid

12. 查询和"01"号的同学学习的课程完全相同的其他同学的学号和姓名

#注意是和'01'号同学课程完全相同但非学习课程数相同的,这里我用左连接解决这个问题select
    t1.sid,sname
from
    (
        select
            sc.sid
            ,count(distinct sc.cid)
        from 
            (
                select
                    cid
                from sc
                where sid='01'
            )t1 #选出01的同学所学的课程
        left join sc
            on t1.cid=sc.cid
        group by sc.sid
        having count(distinct sc.cid)= (select count(distinct cid) from sc where sid = '01')
    )t1
left join student
    on t1.sid=student.sid
where t1.sid!='01'

13. 把“SC”表中“张三”老师教的课的成绩都更改为此课程的平均成绩；
暂跳过update题目


14. 查询没学过"张三"老师讲授的任一门课程的学生姓名

select 
    sname
from student
where sid not in
    (
        select
            distinct sid
        from sc
        left join course
            on sc.cid=course.cid
        left join teacher
            on course.tid=teacher.tid 
        where tname='张三'
    )

15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩

select
    t1.sid,sname,avg_score
from 
    (
        select
            sid,count(if(score<60,cid,null)),avg(score) as avg_score
        from sc
        group by sid
        having count(if(score<60,cid,null)) >=2
    )t1
left join student
    on t1.sid=student.sid

16. 检索"01"课程分数小于60，按分数降序排列的学生信息

select 
    sid,if(cid='01',score,100)from sc
where if(cid='01',score,100)<60
order by if(cid='01',score,100) desc

17. 按平均成绩从高到低显示所有学生的平均成绩

select sid,avg(score)
from sc
group by sid
order by avg(score) desc

18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率

select
    sc.cid
    ,cname
    ,max(score) as max_score
    ,min(score) as min_score
    ,avg(score) as avg_score
    ,count(if(score>=60,sid,null))/count(sid) as pass_rate
 from sc 
 left join course
    on sc.cid=course.cid
 group by sc.cid

19. 按各科平均成绩从低到高和及格率的百分数从高到低顺序

#这里先按照平均成绩排序，再按照及格百分数排序，
select 
    cid
    ,avg(score) as avg_score
    ,count(if(score>=60,sid,null))/count(sid) as pass_rate
from sc
group by cid
order by avg_score,pass_rate desc

20. 查询学生的总成绩并进行排名

select
    sid
    ,sum(score) as sum_score
from sc
group by sid
order by sum_score desc

21. 查询不同老师所教不同课程平均分从高到低显示

select
    tid
    ,avg(score) as avg_score
from course
left join sc
    on course.cid=sc.cid
group by tid
order by avg_score desc

22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩

select
    sid,rank_num,score,cid
from
    (
        select
            rank() over(partition by cid order by score desc) as rank_num
            ,sid
            ,score
            ,cid
        from sc
    )t
where rank_num in (2,3)

23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比

select
    sc.cid
    ,cname
    ,count(if(score between 85 and 100,sid,null))/count(sid)
    ,count(if(score between 70 and 85,sid,null))/count(sid)
    ,count(if(score between 60 and 70,sid,null))/count(sid)
    ,count(if(score between 0 and 60,sid,null))/count(sid)
from sc
left join course
    on sc.cid=course.cid
group by sc.cid,cname

24. 查询学生平均成绩及其名次

select
    sid
    ,avg_score
    ,rank() over (order by avg_score desc)
from 
    (
        select
            sid
            ,avg(score) as avg_score
        from sc
        group by sid
    )t

25. 查询各科成绩前三名的记录

select
    sid,cid,rank1from 
    (
        select
            cid
            ,sid
            ,rank() over(partition by cid order by score desc) as rank1
        from sc
    )twhere rank1<=3

26. 查询每门课程被选修的学生数

select
    count(sid)
    ,cid
from sc
group by cid

27. 查询出只选修了一门课程的全部学生的学号

select
    sid
from sc
group by sid
having count(cid) =1

28. 查询男生、女生人数

select
    ssex
    ,count(distinct sid)
from student        
group by ssex

29. 查询名字中含有"风"字的学生信息

select
    sid,sname
from student
where sname like '%风%'

30. 查询同名同性学生名单，并统计同名人数

select
    ssex
    ,sname
    ,count(sid)
from student
group by ssex,sname
having count(sid)>=2

31. 查询1990年出生的学生名单(注：Student表中Sage列的类型是datetime)

select
    sid,sname,sage
from student
where year(sage)=1990

32. 查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列

select
    cid,avg(score) as avg_score
from sc
group by cid
order by avg_score,cid desc

33. 查询不及格的课程，并按课程号从大到小排列

select
    cid,sid,score
from sc
where score<60
order by cid desc,sid

34. 查询课程编号为"01"且课程成绩在60分以上的学生的学号和姓名；

select
    sid,cid,score
from sc
where cid='01' and score>60

35. 查询选修“张三”老师所授课程的学生中，成绩最高的学生姓名及其成绩

select
    sc.sid,sname,cname,score
from sc
left join course
    style="font-weight: 600;">=course.cid
left join teacher
    style="font-weight: 600;">=teacher.tid
left join student
    style="font-weight: 600;">=student.sid
where tname='张三'
order by score desc
limit 1;

36. 查询每门功课成绩最好的前两名

select
    cid,sid,rank1
from 
    (
        select
            cid
            ,sid
            ,rank() over(partition by cid order by score desc) as rank1
        from sc 
    )t
where rank1 <=2

37. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列

select
    cid
    ,count(sid) as cnt
from sc
group by cid
having cnt>=5
order by count(sid) desc,cid

38. 检索至少选修两门课程的学生学号

select
    sid
    ,count(cid)
from sc
group by sid
having count(cid)>=2

39. 查询选修了全部课程的学生信息

select
    sid
    ,count(cid)
from sc
group by sid
having count(cid)=(select count(distinct cid) from sc)

40. 查询各学生的年龄

select
    sid,sname,year(curdate())-year(sage) as sage
from student

41 查询本周过生日的学生

select
    sid,sname,sage
from student
where weekofyear(sage)=weekofyear(curdate())

42. 查询下周过生日的学生

select 
    sid,sname,sage
from student
where weekofyear(sage) = weekofyear(date_add(curdate(),interval 1 week))

43 查询本月过生日的学生

select
    sid,sname,sage
from student
where month(sage) = month(curdate())

44. 查询下月过生日的学生

select
    sid,sname,sage
from student
where month(date_sub(sage,interval 1 month)) = month(curdate())


===========================================================
-- 部门表
CREATE TABLE dept(
	deptno INT PRIMARY KEY AUTO_INCREMENT COMMENT '部门编号', -- 部门编号
	dname VARCHAR(20) COMMENT '部门名字',	  -- 部门名字
	loc VARCHAR(20) COMMENT '地址'   -- 地址
);
-- 员工表
CREATE TABLE emp(
	empno INT PRIMARY KEY AUTO_INCREMENT,-- 员工编号
	ename VARCHAR(20) COMMENT '员工姓名', -- 员工姓名										-
	job VARCHAR(20) COMMENT '岗位',	-- 岗位
	mgr INT COMMENT '直接领导编号',	 -- 直接领导编号
	hiredate date COMMENT '雇佣日期，入职日期', -- 雇佣日期，入职日期
	sal INT COMMENT '薪水', -- 薪水
	comm INT COMMENT '提成',  -- 提成
	deptno INT NOT NULL COMMENT '部门编号', -- 部门编号
	foreign key (deptno) references dept(deptno)
);
INSERT INTO dept VALUES(10,'财务部','北京');
INSERT INTO dept VALUES(20,'研发部','上海');
INSERT INTO dept VALUES(30,'销售部','广州');
INSERT INTO dept VALUES(40,'行政部','深圳');
INSERT INTO emp VALUES(7369,'刘一','职员',7902,'1980-12-17',800,null,20);
INSERT INTO emp VALUES(7499,'陈二','推销员',7698,'1981-02-20',1600,300,30);
INSERT INTO emp VALUES(7521,'张三','推销员',7698,'1981-02-22',1250,500,30);
INSERT INTO emp VALUES(7566,'李四','经理',7839,'1981-04-02',2975,null,20);
INSERT INTO emp VALUES(7654,'王五','推销员',7698,'1981-09-28',1250,1400,30);
INSERT INTO emp VALUES(7698,'赵六','经理',7839,'1981-05-01',2850,null,30);
INSERT INTO emp VALUES(7782,'孙七','经理',7839,'1981-06-09',2450,null,10);
INSERT INTO emp VALUES(7788,'周八','分析师',7566,'1987-06-13',3000,null,20);
INSERT INTO emp VALUES(7839,'吴九','总裁',null,'1981-11-17',5000,null,10);
INSERT INTO emp VALUES(7844,'郑十','推销员',7698,'1981-09-08',1500,0,30);
INSERT INTO emp VALUES(7876,'郭十一','职员',7788,'1987-06-13',1100,null,20);
INSERT INTO emp VALUES(7900,'钱多多','职员',7698,'1981-12-03',950,null,30);
INSERT INTO emp VALUES(7902,'大锦鲤','分析师',7566,'1981-12-03',3000,null,20);
INSERT INTO emp VALUES(7934,'木有钱','职员',7782,'1983-01-23',1300,null,10);

-- 1．列出至少有一个员工的所有部门及员工数量。
SELECT d.dname 部门名称, COUNT(*) 员工数量 
FROM emp e
LEFT JOIN dept d
ON e.deptno = d.deptno
GROUP BY e.deptno;

-- 2．列出薪金比"刘一"多的所有员工。
SELECT ename 员工名称, sal 员工薪水 
FROM emp 
WHERE sal > (SELECT sal FROM emp WHERE ename = '刘一');

-- 3．列出所有员工的姓名及其直接上级的姓名。
SELECT self.ename 员工, mgr.ename 上级 
FROM emp self
LEFT JOIN emp mgr
ON self.mgr = mgr.empno;

-- 4．列出受雇日期早于其直接上级的所有员工。
SELECT self.ename 员工, mgr.ename 上级, self.hiredate 员工受雇日期, mgr.hiredate 上级受雇日期 
FROM emp self
LEFT JOIN emp mgr
ON self.mgr = mgr.empno
WHERE self.hiredate < mgr.hiredate;

-- 5．列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门。
SELECT d.dname 部门名称, e.ename 员工信息 
FROM dept d
LEFT JOIN emp e
ON e.deptno = d.deptno;

-- 6．列出所有job为“职员”的姓名及其部门名称。
SELECT e.ename 员工名称, d.dname 部门名称, e.job
FROM emp e
LEFT JOIN dept d
ON e.deptno = d.deptno
WHERE e.job = '职员';

-- 7．列出最低薪金大于1500的各种工作。
SELECT DISTINCT job FROM emp WHERE sal > 1500;

-- 8．列出在部门 "销售部" 工作的员工的姓名，假定不知道销售部的部门编号。
SELECT e.ename FROM emp e
LEFT JOIN dept d
ON e.deptno = d.deptno
WHERE d.dname = '销售部';

-- 9．列出薪金高于公司平均薪金的所有员工。
SELECT ename, sal FROM emp WHERE sal > (SELECT AVG(sal) FROM emp);

-- 10．列出与"周八"从事相同工作的所有员工。
SELECT ename, job FROM emp WHERE job = (SELECT job FROM emp WHERE ename = '周八');

-- 11．列出薪金等于部门30中员工的薪金的所有员工的姓名和薪金。
SELECT ename, sal, deptno FROM emp WHERE sal IN (SELECT sal FROM emp WHERE deptno = 30);

-- 12．列出薪金高于在部门30工作的所有员工的薪金的员工姓名和薪金。
SELECT ename, sal, deptno FROM emp WHERE sal > (SELECT MAX(sal) FROM emp WHERE deptno = 30);

-- 13．列出在每个部门工作的员工数量、平均工资。
SELECT dept.deptno,COUNT(emp.empno),AVG(sal)
FROM dept
LEFT JOIN emp
ON dept.deptno=emp.deptno
GROUP BY dept.deptno;

-- 14．列出所有员工的姓名、部门名称和工资。
SELECT e.ename 姓名, d.dname 部门名称, e.sal 工资 FROM emp e
LEFT JOIN dept d
ON e.deptno = d.deptno;

-- 15．列出所有部门的详细信息和部门人数。
SELECT d.deptno 部门编号, d.dname 部门名称, d.loc 位置, tmp.count 人数 FROM dept d 
LEFT JOIN (SELECT deptno, COUNT(deptno) count FROM emp GROUP BY deptno) tmp
ON d.deptno = tmp.deptno;

-- 16．列出各种工作的最低工资。
SELECT job, MIN(sal) 最低工资 FROM emp GROUP BY job;

-- 17．列出各个部门的 经理 的最低薪金。
SELECT d.dname 部门名称, tmp.sal 薪水 FROM dept d
LEFT JOIN (SELECT MIN(sal) sal, deptno FROM emp WHERE job = '经理' GROUP BY deptno) tmp
ON d.deptno = tmp.deptno;

-- 18．列出所有员工的年工资,按年薪从低到高排序。 
SELECT ename, (sal + IFNULL(comm, 0)) * 12 FROM emp;

-- 19.查出emp表中薪水在3000以上（包括3000）的所有员工的员工号、姓名、薪水。
SELECT empno, ename, sal FROM emp WHERE sal >= 3000;

-- 20.查询出所有薪水在'陈二'之上的所有人员信息。
SELECT empno, ename, sal FROM emp WHERE sal > (SELECT sal FROM emp WHERE ename = '陈二');

-- 21.查询出emp表中部门编号为20，薪水在2000以上（不包括2000）的所有员工，显示他们的员工号，姓名以及薪水，以如下列名显示：员工编号 员工名字 薪水
SELECT empno 员工编号, ename 员工名字, sal 薪水 FROM emp WHERE sal > 2000 AND deptno = 20;

-- 22.查询出emp表中所有的工作种类（无重复）
SELECT job FROM emp GROUP BY job;

-- 23.查询出所有奖金（comm）字段不为空的人员的所有信息。
SELECT * FROM emp WHERE comm IS NOT NULL;

-- 24.查询出薪水在800到2500之间（闭区间）所有员工的信息。（注：使用两种方式实现and以及between and）
SELECT * FROM emp WHERE sal BETWEEN 800 AND 2500;
SELECT * FROM emp WHERE sal >= 800 AND sal <= 2500;

-- 25.查询出员工号为7521，7900，7782的所有员工的信息。（注：使用两种方式实现，or以及in）
SELECT * FROM emp WHERE empno IN (7521, 7900, 7782);
SELECT * FROM emp WHERE empno = 7521 OR empno = 7900 OR empno = 7782;

-- 26.查询出名字中有“张”字符，并且薪水在1000以上（不包括1000）的所有员工信息。
SELECT * FROM emp WHERE ename LIKE '%张%' AND sal > 1000;

-- 27.查询出名字第三个汉字是“多”的所有员工信息。
SELECT * FROM emp WHERE ename LIKE '__多%';

-- 28.将所有员工按薪水升序排序，薪水相同的按照入职时间降序排序。
SELECT * FROM emp ORDER BY sal, hiredate DESC;

-- 29.将所有员工按照名字首字母升序排序，首字母相同的按照薪水降序排序。 order by convert(name using gbk) asc; 
SELECT ename, SUBSTR(ename, 1, 1), sal FROM emp ORDER BY CONVERT(substring(ename,1,1) USING gbk), sal DESC;

-- 30.查询出最早工作的那个人的名字、入职时间和薪水。
SELECT * FROM emp WHERE hiredate = (SELECT MIN(hiredate) FROM emp);

-- 31.显示所有员工的名字、薪水、奖金，如果没有奖金，暂时显示100.
SELECT ename, sal, IFNULL(comm, 100) comm FROM emp;

-- 32.显示出薪水最高人的职位。
SELECT job, sal FROM emp WHERE sal = (SELECT MAX(sal) FROM emp);

-- 33.查出emp表中所有部门的最高薪水和最低薪水，部门编号为10的部门不显示。
SELECT deptno, MAX(sal) 最高薪水, MIN(sal) 最低薪水 FROM emp WHERE deptno != 10 GROUP BY deptno;

-- 34.删除10号部门薪水最高的员工。
DELETE FROM emp WHERE sal = (SELECT emp.sal FROM (SELECT MAX(sal) sal FROM emp WHERE deptno = 10) emp);

-- 35.将薪水最高的员工的薪水降30%。
UPDATE emp SET sal = sal * 0.7 WHERE sal = (SELECT tmp.sal FROM (SELECT MAX(sal) sal FROM emp) tmp);

-- 36.查询员工姓名，工资和 工资级别(工资>=3000 为3级，工资>2000 为2级，工资<=2000 为1级)
-- 语法：case when ... then ... when ... then ... else ... end
SELECT ename, sal,
    CASE WHEN sal>=3000 THEN '3级'
         WHEN sal>=2000 THEN '2级'
         ELSE '1级'
    END
FROM emp;


=============================================
CREATE TABLE if not exists `s_dept` (
  `dept_no` int(3) unsigned zerofill NOT NULL AUTO_INCREMENT,
  `dept_name` varchar(32) NOT NULL,
  `is_valid` char(2) NOT NULL,
  PRIMARY KEY (`dept_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE if not exists `s_staff` (
  `staff_no` int(6) unsigned NOT NULL AUTO_INCREMENT,
  `staff_name` varchar(32) NOT NULL,
  `is_valid` char(2) NOT NULL,
  `dept_no` int(3) unsigned zerofill DEFAULT NULL,
  PRIMARY KEY (`staff_no`),
  KEY `dept_no` (`dept_no`),
  CONSTRAINT `s_staff_ibfk_1` FOREIGN KEY (`dept_no`) REFERENCES `s_dept` (`dept_no`)
) ENGINE=InnoDB AUTO_INCREMENT=100011 DEFAULT CHARSET=utf8;

ceciliao334
